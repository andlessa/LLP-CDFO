#!/usr/bin/env python3

from pathlib import Path
import re

if __name__ == '__main__':
	import argparse
	parser = argparse.ArgumentParser(description='Generate MA5 files for scripted runs with data generated by MG5')
	parser.add_argument('procDir', metavar='proc_dir_path', help='Path to the Process directory containing MA5 output folders') #required=True if not positional
	parser.add_argument('outcardDir', metavar='MA5cards_dir_path', help='Path to the output directory to write the MA5 files', default="~/MA5cards")
	parser.add_argument('recastPath', metavar='recast_card_path', help='Path to the recast card to be used with MA5 recasting mode', default="../Custom_MA5_files/recasting_card.dat")
	parser.add_argument('MA5_outpath', metavar='MA5_output_dir_path', help='Path to the directory to contain the analysis results from MA5 scripted runs', default="~/MA5_outputs")
	args = parser.parse_args()

	procpath = Path(args.procDir)
	outcardpath = Path(args.outcardDir)
	recastpath = Path(args.recastPath)
	analysispath = Path(args.MA5_outpath)

	if not procpath.is_dir():
		raise FileNotFoundError("No process folder found at path %s" %(procpath))
	try:
		outcardpath.mkdir(parents=True, exist_ok=True)
	except:
		if outcardpath.is_dir():
			raise IOError("Couldn't access target folder to write MA5 cards; check if the user has the correct permissions.")
		else:
			raise IOError("Output folder doesn't exist and could not be created. Check if path was given correctly and the writing permissions of parent directories.")
	try:
		analysispath.mkdir(parents=True, exist_ok=True)
	except:
		if analysispath.is_dir():
			raise IOError("Couldn't access target folder to write MA5 analysis results; check if the user has the correct permissions.")
		else:
			raise IOError("Target folder for MA5 analysis results doesn't exist and could not be created. Check if path was given correctly and the writing permissions of parent directories.")
	print("Starting to parse MG5 outputs...")
	
	outputs=[]
	MG5_paths=procpath.rglob("*.hepmc.*")
	for hepmcfile in MG5_paths:
		key=re.sub("\_tau.*$", "", hepmcfile.name)
		outfile_path = outcardpath / (key+".ma5")
		if not outfile_path.is_file():
			with outfile_path.open('a') as ma5card:
				ma5card.write("set main.recast = on\n")
				ma5card.write("set main.recast.store_root = False\n")
				ma5card.write("set main.recast.card_path = %s\n" %(recastpath))
				ma5card.write("import %s as %s\n" %(hepmcfile.absolute(),re.sub("\.","p", re.sub("_tau.*$","",hepmcfile.name))))
				outputs.append(outfile_path)
		else:
			ma5card.write("import %s as %s\n" %(hepmcfile.absolute(),re.sub("\.","p", re.sub("_tau.*$","",hepmcfile.name))))

	for file in outputs:
		with file.open('a') as ma5card:
			ma5card.write("submit %s\n" %(analysispath / (file.stem)))
	print("Wrote %d .ma5 cards to directory %s" %(len(outputs), outcardpath))
	print("Finished!")
	
